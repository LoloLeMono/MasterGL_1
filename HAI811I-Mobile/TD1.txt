TD1 :

EXERCICE 1

<?xml version="1.0" encoding="utf-8"?>
<manifest xmIns:android="http://schemas,android,com/ank/res/android"
    package="com. javacodegeeks.examples.androidViewPagerExample" >

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher" es android:label="@string/app_name"
        android:theme="@style/AppTheme">
        <activity
        android:name=".AndroidViewPagerExample"
        android:label="@string/app_name" >

            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>

JAVA : Logique métier
     
import android.widget.TextView;
public class HelloAndroid extends Activity
{
    @Override
    public void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        TextView tv = new TextView(this);
        tv.setText("Hello, Android");
        setContentView(tv);
    }
}

2)
Il faut créer un layout qui englobe les 2 view (la saisie et l'affichage du text) *

Puis on créer une nouvelle view pour la saisie **

Puis on rajoute les 2 view au layout ***

LinearLayout ll = new LinearLayout(this); *
EditText et = new EditText(this); **
ll.orientation = Vertical;
ll.add(tv); ***
ll.add(et); ***
setContentView(ll); ***


////////////////////////////////////////////////////////////////////////////


<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:orientation="vertical" >
<TextView android:id="@+id/text"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="Hello, I am a TextView" />
</LinearLayout>

JAVA : Logique métier

package com.android.helloandroid;
import android.app.Activity;
import android.os.Bundle;
import android.widget.TextView;

public class HelloAndroid extends Activity
{
    @Override
    public void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.layout_file_name);
    }
}

3)
Dans le premier exercice, on défini la vue dans le code directement alors qu'içi, on la défini dans un fichier ressource.
wrap_content = prend juste la place necessaire
fill_parent = prend la même place que le parent
R = classe généré par Android qui contient les constante pour les ressources

4)
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:orientation="vertical" >
<EditText android:id="@+id/text"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="Hello, I am a TextView" />
</LinearLayout>

////////////////////////////////////////////////////////////////////////////


EXERCICE 2

1)
On utlise pas directement la valeur mais on externalise la ressource. 

2)
On rajoute un label dans string.xml
<string name="title"> Ma première application Android </string>


<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:orientation="vertical" >

<TextView android:id="@+id/text"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="@string/title" />

<EditText android:id="@+id/text"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="Hello, I am a TextView" />

<Button
    android:id="@+id/mainbutton"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="@string/button_label" />
</LinearLayout>


////////////////////////////////////////////////////////////////////////////


EXERCICE 3

1)
Affiche normal
Le poid du 3eme prend tout l'espace restant
android:layout_weight="1"

2)
Relative layout => positionner les un par rapport au autres
android:layout_below="@+id/button3" = ordre de position

EXERCICE 4 

1)
Ajout d'un listener sur le bouton

2)
<Button
android:id="@+id/secondbutton"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="@string/mainbutton" />

button2 = (Button) findViewById(R.id.secondbutton);
button2.setOnClickListener(new OnClickListener()
{
    @Override
    public void onClick(View arg0)
    {
        Toast.makeText(getApplicationContext(),"TOAST", Toast.LENGTH_LONG).show();
    }
});

3)
On creer un textView vide et on ajoute le texte "Exercice 4" une fois cliqué

4)
Avec le referencement par label dans les ressources

5)
Remplacer OnClickListener par OnLongClickListener, si on veut les 2 modes, on les ajoutes les 2


////////////////////////////////////////////////////////////////////////////


EXERCICE 5
1)
Le message sera afficher seulement quand on cliquera sur le dernier bouton.